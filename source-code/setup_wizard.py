#!/usr/bin/env python3
"""
配置向导
帮助用户快速配置系统
"""

import os
import sys
import re

def print_colored(text, color_code=None):
    """打印彩色文本"""
    colors = {
        'red': '\033[91m',
        'green': '\033[92m',
        'yellow': '\033[93m',
        'blue': '\033[94m',
        'purple': '\033[95m',
        'cyan': '\033[96m',
        'white': '\033[97m',
        'bold': '\033[1m',
        'end': '\033[0m'
    }
    
    if color_code and color_code in colors:
        print(f"{colors[color_code]}{text}{colors['end']}")
    else:
        print(text)

def read_env_file():
    """读取现有的.env文件"""
    env_vars = {}
    if os.path.exists('.env'):
        with open('.env', 'r', encoding='utf-8') as f:
            for line in f:
                line = line.strip()
                if line and not line.startswith('#') and '=' in line:
                    key, value = line.split('=', 1)
                    env_vars[key.strip()] = value.strip()
    return env_vars

def write_env_file(env_vars):
    """写入.env文件"""
    with open('.env', 'w', encoding='utf-8') as f:
        f.write("# AI News Notification System Configuration\n")
        f.write("# Generated by setup wizard\n\n")
        
        f.write("# WeChat Work Robot Webhook URL\n")
        f.write(f"WECHAT_WEBHOOK_URL={env_vars.get('WECHAT_WEBHOOK_URL', 'https://qyapi.weixin.qq.com/cgi-bin/webhook/send?key=YOUR_BOT_KEY')}\n\n")
        
        f.write("# Bilibili UP主 ID (橘鸦Juya)\n")
        f.write(f"BILIBILI_UP_UID={env_vars.get('BILIBILI_UP_UID', '285286947')}\n\n")
        
        f.write("# Check interval in minutes\n")
        f.write(f"CHECK_INTERVAL={env_vars.get('CHECK_INTERVAL', '30')}\n\n")
        
        f.write("# Log level\n")
        f.write(f"LOG_LEVEL={env_vars.get('LOG_LEVEL', 'INFO')}\n")

def setup_wechat():
    """设置企业微信配置"""
    print_colored("\n🤖 企业微信机器人配置", 'bold')
    print_colored("=" * 40, 'cyan')
    
    print("\n📋 获取企业微信机器人Webhook URL的步骤:")
    print("1. 在企业微信中打开要接收通知的群聊")
    print("2. 点击群聊设置 -> 群机器人")
    print("3. 点击 '添加机器人'")
    print("4. 选择 '自定义机器人'")
    print("5. 设置机器人名称（如：AI早报通知）")
    print("6. 复制生成的 Webhook URL")
    
    print_colored("\n⚠️  重要提醒:", 'yellow')
    print("- Webhook URL包含敏感信息，请勿泄露")
    print("- URL格式应为: https://qyapi.weixin.qq.com/cgi-bin/webhook/send?key=xxxxx")
    
    while True:
        webhook_url = input("\n请输入企业微信机器人的Webhook URL (回车跳过): ").strip()
        
        if not webhook_url:
            print_colored("⏭️  跳过企业微信配置，稍后可在.env文件中手动配置", 'yellow')
            return None
        
        # 验证URL格式
        if not webhook_url.startswith('https://qyapi.weixin.qq.com/cgi-bin/webhook/send?key='):
            print_colored("❌ URL格式不正确，请检查是否为完整的Webhook URL", 'red')
            continue
        
        if 'YOUR_BOT_KEY' in webhook_url or len(webhook_url) < 80:
            print_colored("❌ 请使用实际的Webhook URL，不要使用示例地址", 'red')
            continue
        
        print_colored("✅ URL格式正确", 'green')
        return webhook_url

def setup_other_configs():
    """设置其他配置"""
    configs = {}
    
    print_colored("\n⚙️  其他配置选项", 'bold')
    print_colored("=" * 40, 'cyan')
    
    # 检查间隔
    print("\n⏰ 设置检查间隔（建议20-60分钟）:")
    while True:
        interval = input("检查间隔（分钟，默认30）: ").strip()
        if not interval:
            configs['CHECK_INTERVAL'] = '30'
            break
        try:
            interval_int = int(interval)
            if 5 <= interval_int <= 1440:  # 5分钟到24小时
                configs['CHECK_INTERVAL'] = str(interval_int)
                break
            else:
                print_colored("❌ 请输入5-1440之间的数字", 'red')
        except ValueError:
            print_colored("❌ 请输入有效的数字", 'red')
    
    # 日志级别
    print("\n📝 设置日志级别:")
    print("1. DEBUG - 详细调试信息")
    print("2. INFO - 一般信息（推荐）")
    print("3. WARNING - 仅警告和错误")
    print("4. ERROR - 仅错误信息")
    
    while True:
        level_choice = input("选择日志级别（1-4，默认2）: ").strip()
        if not level_choice:
            level_choice = '2'
        
        level_map = {'1': 'DEBUG', '2': 'INFO', '3': 'WARNING', '4': 'ERROR'}
        if level_choice in level_map:
            configs['LOG_LEVEL'] = level_map[level_choice]
            break
        else:
            print_colored("❌ 请输入1-4之间的数字", 'red')
    
    return configs

def test_configuration():
    """测试配置"""
    print_colored("\n🧪 测试系统配置", 'bold')
    print_colored("=" * 40, 'cyan')
    
    print("正在运行系统测试...")
    os.system("python3 test_system.py")

def main():
    """主配置向导"""
    print_colored("🚀 AI News Notification System", 'bold')
    print_colored("配置向导", 'bold')
    print_colored("=" * 50, 'cyan')
    
    print("\n欢迎使用AI早报通知系统配置向导！")
    print("这个向导将帮助您快速配置系统以开始使用。")
    
    # 读取现有配置
    env_vars = read_env_file()
    
    # 设置企业微信
    webhook_url = setup_wechat()
    if webhook_url:
        env_vars['WECHAT_WEBHOOK_URL'] = webhook_url
        print_colored("✅ 企业微信配置完成", 'green')
    
    # 设置其他配置
    other_configs = setup_other_configs()
    env_vars.update(other_configs)
    
    # 设置默认值
    env_vars.setdefault('BILIBILI_UP_UID', '285286947')
    
    # 保存配置
    write_env_file(env_vars)
    print_colored("\n💾 配置已保存到 .env 文件", 'green')
    
    # 显示配置摘要
    print_colored("\n📋 配置摘要:", 'bold')
    print_colored("-" * 30, 'cyan')
    wechat_status = "✅ 已配置" if webhook_url else "❌ 未配置"
    print(f"企业微信机器人: {wechat_status}")
    print(f"检查间隔: {env_vars.get('CHECK_INTERVAL', '30')} 分钟")
    print(f"日志级别: {env_vars.get('LOG_LEVEL', 'INFO')}")
    print(f"UP主ID: {env_vars.get('BILIBILI_UP_UID', '285286947')} (橘鸦Juya)")
    
    # 询问是否运行测试
    print_colored("\n🧪 配置完成！", 'bold')
    test_choice = input("是否立即运行系统测试？(y/n，默认y): ").strip().lower()
    if test_choice != 'n':
        test_configuration()
    
    # 显示下一步
    print_colored("\n🎉 配置向导完成！", 'bold')
    print_colored("\n📝 下一步操作:", 'bold')
    if webhook_url:
        print("1. 运行测试: python3 main.py --mode test")
        print("2. 正式启动: python3 main.py --mode run")
        print("3. 或使用启动脚本: ./run.sh run")
    else:
        print("1. 在 .env 文件中配置企业微信 Webhook URL")
        print("2. 运行测试: python3 main.py --mode test")
        print("3. 正式启动: python3 main.py --mode run")
    
    print_colored("\n💡 提示: 使用 './run.sh --help' 查看更多运行选项", 'cyan')

if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        print_colored("\n\n👋 配置向导已取消", 'yellow')
        sys.exit(0)
    except Exception as e:
        print_colored(f"\n❌ 配置向导出现错误: {e}", 'red')
        sys.exit(1)
